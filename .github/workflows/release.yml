name: Release Artifacts

on:
  push:
    branches: [ "develop", "main" ]
    tags: [ "v*" ]

permissions:
  contents: read
  packages: write

jobs:
  static_binaries:
    name: Build Static Executables
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - aarch64
          - x86_64
    env:
      CARGO_TERM_COLOR: always
      TARGET: ${{ matrix.arch }}-unknown-linux-musl
    steps:
    - uses: actions/checkout@v3
    - name: Install QEMU
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-user-static
    - name: Install Rust Toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        override: true
        target: ${{ env.TARGET }}
        toolchain: stable
    - name: Cache Build Artifacts
      uses: actions/cache@v3
      with:
        key: ${{ env.TARGET }}-cargo-${{ hashFiles('**/Cargo.lock') }}-release
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
    - name: Compile
      uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --release --target ${{ env.TARGET }}
        toolchain: stable
    - name: Upload Binaries
      uses: actions/upload-artifact@v3
      with:
        name: rtsp2mjpg.${{ matrix.arch }}
        path: target/${{ env.TARGET }}/release/rtsp2mjpg

  container_images:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: static_binaries
    strategy:
      matrix:
        arch:
          - amd64/x86_64
          - arm64/aarch64
    env:
      IMAGE_NAME: ${{ github.repository }}
      IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
      REGISTRY_USERNAME: ${{ github.actor }}
      REGISTRY_PASSWORD: ${{ github.token }}
    steps:
    - uses: actions/checkout@v3
    - name: Extract Architecture Strings
      id: extract_arch
      run: |
        OCI_ARCH=$(cut -d '/' -f1 <<<${{ matrix.arch }})
        RS_ARCH=$( cut -d '/' -f2 <<<${{ matrix.arch }})
        echo "oci_arch=${OCI_ARCH}" >>"$GITHUB_OUTPUT"
        echo "rs_arch=${RS_ARCH}"   >>"$GITHUB_OUTPUT"
    - name: Download Static Binary
      uses: actions/download-artifact@v3
      with:
        name: rtsp2mjpg.${{ steps.extract_arch.outputs.rs_arch }}
    - name: Build Container
      id: build_image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.IMAGE_NAME }}
        tags: ${{ steps.extract_arch.outputs.oci_arch }}
        platforms: linux/${{ steps.extract_arch.outputs.oci_arch }}
        build-args: arch=${{ steps.extract_arch.outputs.rs_arch }}
        containerfiles: |
          ./Containerfile
    - name: Export Container
      run: |
        podman image save --quiet -o rtsp2mjpg-${{ steps.extract_arch.outputs.oci_arch }}.tar ${{ steps.build_image.outputs.image-with-tag }}
    - name: Upload Binaries
      uses: actions/upload-artifact@v3
      with:
        name: rtsp2mjpg-${{ steps.extract_arch.outputs.oci_arch }}.tar
        path: ./rtsp2mjpg-${{ steps.extract_arch.outputs.oci_arch }}.tar

  multiarch_image:
    name: Build Multi-Arch Container Image
    runs-on: ubuntu-latest
    needs: container_images
    steps:
    - id: metadata
      name: Configure Container Metadata
      uses: docker/metadata-action@v4
      with:
        images: |
          ghcr.io/${{ env.IMAGE_NAME }}
        tags: |
          type=sha
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major.minor}}
          type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
    - name: Download Per-Arch Container Images
      uses: actions/download-artifact@v3
      with:
        name: rtsp2mjpg-${{ steps.extract_arch.outputs.rs_arch }}
    - name: Display Downloaded Archites
      run: |
        ls -R
